// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/ddb/ddbmock/example (interfaces: GoMockStorage)

// Package example is a generated GoMock package.
package example

import (
	context "context"
	reflect "reflect"

	ddb "github.com/common-fate/ddb"
	gomock "github.com/golang/mock/gomock"
)

// MockGoMockStorage is a mock of GoMockStorage interface.
type MockGoMockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGoMockStorageMockRecorder
}

// MockGoMockStorageMockRecorder is the mock recorder for MockGoMockStorage.
type MockGoMockStorageMockRecorder struct {
	mock *MockGoMockStorage
}

// NewMockGoMockStorage creates a new mock instance.
func NewMockGoMockStorage(ctrl *gomock.Controller) *MockGoMockStorage {
	mock := &MockGoMockStorage{ctrl: ctrl}
	mock.recorder = &MockGoMockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoMockStorage) EXPECT() *MockGoMockStorageMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockGoMockStorage) Query(arg0 context.Context, arg1 ddb.QueryBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockGoMockStorageMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGoMockStorage)(nil).Query), arg0, arg1)
}
