// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/ddb/ddbmock (interfaces: TestReporter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTestReporter is a mock of TestReporter interface.
type MockTestReporter struct {
	ctrl     *gomock.Controller
	recorder *MockTestReporterMockRecorder
}

// MockTestReporterMockRecorder is the mock recorder for MockTestReporter.
type MockTestReporterMockRecorder struct {
	mock *MockTestReporter
}

// NewMockTestReporter creates a new mock instance.
func NewMockTestReporter(ctrl *gomock.Controller) *MockTestReporter {
	mock := &MockTestReporter{ctrl: ctrl}
	mock.recorder = &MockTestReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReporter) EXPECT() *MockTestReporterMockRecorder {
	return m.recorder
}

// Fatal mocks base method.
func (m *MockTestReporter) Fatal(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockTestReporterMockRecorder) Fatal(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockTestReporter)(nil).Fatal), arg0...)
}
